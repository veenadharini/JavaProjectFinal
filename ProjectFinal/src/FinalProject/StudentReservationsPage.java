/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package FinalProject;

import FinalProject.ConnectionClass;
import FinalProject.StudentLoginPage;
import FinalProject.StudentReservationsQRScanner;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import java.time.LocalDate;

/**
 *
 * @author hamza
 */

public class StudentReservationsPage extends javax.swing.JFrame {
     Timer t;
    SimpleDateFormat st;
    SimpleDateFormat st1;

    /**
     * Creates new form StudentReservationsPage
     */
    Connection con;
    public StudentReservationsPage() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        reservationsTable = new javax.swing.JTable();
        nameField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        timingField = new javax.swing.JTextField();
        dateField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cancelButton = new javax.swing.JButton();
        checkInButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        statusField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        nameLabel = new javax.swing.JLabel();
        floorField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        navigate = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        slotField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1920, 1080));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setMaximumSize(new java.awt.Dimension(1920, 1080));
        jPanel1.setMinimumSize(new java.awt.Dimension(1920, 1080));
        jPanel1.setPreferredSize(new java.awt.Dimension(1920, 1080));
        jPanel1.setLayout(null);

        reservationsTable.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        reservationsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Seat Name", "Timing", "Date", "Floor", "Status", "slot"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        reservationsTable.setSelectionBackground(new java.awt.Color(133, 0, 0));
        reservationsTable.getTableHeader().setReorderingAllowed(false);
        reservationsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reservationsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(reservationsTable);
        if (reservationsTable.getColumnModel().getColumnCount() > 0) {
            reservationsTable.getColumnModel().getColumn(0).setResizable(false);
            reservationsTable.getColumnModel().getColumn(1).setResizable(false);
            reservationsTable.getColumnModel().getColumn(2).setResizable(false);
            reservationsTable.getColumnModel().getColumn(3).setResizable(false);
            reservationsTable.getColumnModel().getColumn(4).setResizable(false);
            reservationsTable.getColumnModel().getColumn(5).setMinWidth(0);
            reservationsTable.getColumnModel().getColumn(5).setPreferredWidth(0);
            reservationsTable.getColumnModel().getColumn(5).setMaxWidth(0);
        }

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(190, 220, 1600, 316);

        nameField.setEditable(false);
        nameField.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        jPanel1.add(nameField);
        nameField.setBounds(440, 570, 251, 50);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Seat Name");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(240, 570, 92, 50);

        timingField.setEditable(false);
        timingField.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        jPanel1.add(timingField);
        timingField.setBounds(440, 640, 251, 50);

        dateField.setEditable(false);
        dateField.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        jPanel1.add(dateField);
        dateField.setBounds(440, 720, 251, 50);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("Timing");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(240, 640, 59, 50);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setText("Date");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(240, 720, 40, 50);

        cancelButton.setBackground(new java.awt.Color(100, 0, 0));
        cancelButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        cancelButton.setForeground(new java.awt.Color(255, 255, 255));
        cancelButton.setText("CANCEL APPOINTMENT");
        cancelButton.setBorder(null);
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        jPanel1.add(cancelButton);
        cancelButton.setBounds(260, 970, 290, 60);

        checkInButton.setBackground(new java.awt.Color(100, 0, 0));
        checkInButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        checkInButton.setForeground(new java.awt.Color(255, 255, 255));
        checkInButton.setText("CHECK-IN");
        checkInButton.setBorder(null);
        checkInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkInButtonActionPerformed(evt);
            }
        });
        jPanel1.add(checkInButton);
        checkInButton.setBounds(620, 970, 240, 60);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setText("Status");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(240, 800, 66, 50);

        statusField.setEditable(false);
        statusField.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        jPanel1.add(statusField);
        statusField.setBounds(440, 800, 251, 50);

        jButton1.setBackground(new java.awt.Color(100, 0, 0));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("VIEW UPCOMING RESERVATONS");
        jButton1.setBorder(null);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(1110, 632, 370, 60);

        jButton3.setBackground(new java.awt.Color(100, 0, 0));
        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("VIEW ALL RESERVATIONS");
        jButton3.setBorder(null);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3);
        jButton3.setBounds(1110, 752, 370, 60);

        nameLabel.setBackground(new java.awt.Color(100, 0, 0));
        nameLabel.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        nameLabel.setForeground(new java.awt.Color(133, 0, 0));
        nameLabel.setText("UPCOMING RESERVATIONS");
        jPanel1.add(nameLabel);
        nameLabel.setBounds(824, 128, 315, 32);

        floorField.setEditable(false);
        floorField.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        jPanel1.add(floorField);
        floorField.setBounds(440, 880, 251, 50);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel5.setText("Floor");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(240, 880, 193, 50);

        jButton2.setText("Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2);
        jButton2.setBounds(120, 60, 80, 23);

        navigate.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        navigate.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Account", "Back To Home Page", "My Profile", "Order Page", "Logout" }));
        navigate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                navigateMouseClicked(evt);
            }
        });
        navigate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                navigateActionPerformed(evt);
            }
        });
        jPanel1.add(navigate);
        navigate.setBounds(1705, 70, 170, 50);

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Frame 2 (8).png"))); // NOI18N
        jLabel6.setText("jLabel6");
        jLabel6.setMaximumSize(new java.awt.Dimension(1920, 1080));
        jLabel6.setMinimumSize(new java.awt.Dimension(1920, 1080));
        jLabel6.setPreferredSize(new java.awt.Dimension(1920, 1080));
        jPanel1.add(jLabel6);
        jLabel6.setBounds(0, -20, 1940, 1100);

        slotField.setEditable(false);
        slotField.setMaximumSize(new java.awt.Dimension(0, 0));
        slotField.setMinimumSize(new java.awt.Dimension(0, 0));
        slotField.setPreferredSize(new java.awt.Dimension(0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(slotField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(slotField, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        
        //validations
        if(nameField.getText().equals("") || timingField.getText().equals("") || dateField.getText().equals("")
                || statusField.getText().equals("") || floorField.getText().equals("") ) {
        JOptionPane.showMessageDialog(null,"Details of cancellation slot not entered");
        return;
        }
        
        //----------------------------------------------------------------------
        
        
        String seatName = nameField.getText();
        String timing = timingField.getText();
        String date = dateField.getText();
        String slot = slotField.getText();
        String username = StudentLoginPage.usernameField.getText();
        DefaultTableModel HospitalTableModel = (DefaultTableModel)reservationsTable.getModel();
            int selectedRowIndex = reservationsTable.getSelectedRow();
        
       
         try{                                      
            con = ConnectionClass.getConnection();
            Statement RemoveHAStatement = (Statement) con.createStatement();
           
            String RemoveHASql = ("Delete from slot_info where username  = '"+username+"' and seat_name = '"+seatName+"' and time = '"+timing+"' and date = '"+date+"' ");
           
           
            PreparedStatement RemoveHAPS = con.prepareStatement(RemoveHASql);
            RemoveHAPS.executeUpdate();                    
            JOptionPane.showMessageDialog(null,"reservation cancelled" );
             nameField.setText("");
             timingField.setText("");
             dateField.setText("");
             statusField.setText("");
            floorField.setText("");
               
               
       
        }catch(Exception e)   {                                      
        JOptionPane.showMessageDialog(null, e);
        }
        
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
        
        
        checkInButton.setEnabled(false);
        cancelButton.setEnabled(true);
         Date dt = new Date();
         st = new SimpleDateFormat("HH");
         String tt = st.format(dt); 
         

         
         Date date1 = new Date();
         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
         String dd = sdf.format(date1);
         
        
        String userID = StudentLoginPage.usernameField.getText();

        String status = "Not checked-in";
              
        try{
            con =  ConnectionClass.getConnection();
            Statement doctorAppointmentStatement = (Statement) con.createStatement();
            
            
           
            String patientSql = ("Select seat_name, time, date, slot, status, floor from slot_info where (username = '"+userID+"' and date = '"+dd+"' and slot > '"+tt+"' and status = '"+status+"') or (username = '"+userID+"' and date > '"+dd+"' and status = '"+status+"') order by date  ");
            PreparedStatement patientPreparedStatement = con.prepareStatement(patientSql);
            ResultSet patientResultSet = patientPreparedStatement.executeQuery();
            DefaultTableModel washingtonModel = (DefaultTableModel)reservationsTable.getModel();
            washingtonModel.setRowCount(0);
            while(patientResultSet.next())
            {

            Object washington[] = { patientResultSet.getString("seat_name"),patientResultSet.getString("time"),patientResultSet.getString("date"),patientResultSet.getString("floor"),patientResultSet.getString("status"),patientResultSet.getString("slot")};

            washingtonModel.addRow(washington);
            }
         //   String slot = slotField.getText();
          //  String date = dateField.getText();
            
             
         
        
         
    
    } catch(Exception e){
        JOptionPane.showMessageDialog(null, e);
    
    }
       
    }//GEN-LAST:event_formWindowActivated

    private void reservationsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reservationsTableMouseClicked
        // TODO add your handling code here:
         DefaultTableModel HospitalTableModel = (DefaultTableModel)reservationsTable.getModel();
            int selectedRowIndex = reservationsTable.getSelectedRow();
           
            nameField.setText((String) HospitalTableModel.getValueAt(selectedRowIndex, 0));          
            timingField.setText((String) HospitalTableModel.getValueAt(selectedRowIndex, 1));          
            dateField.setText((String) HospitalTableModel.getValueAt(selectedRowIndex, 2));

            floorField.setText((String) HospitalTableModel.getValueAt(selectedRowIndex, 3));
            statusField.setText((String) HospitalTableModel.getValueAt(selectedRowIndex, 4));
            slotField.setText((String) HospitalTableModel.getValueAt(selectedRowIndex, 5));

            
            Date dt = new Date();
         st = new SimpleDateFormat("HH");
         String tt = st.format(dt); 
         
        
         String slot = slotField.getText();
         
         String date = dateField.getText();
        // int datei = Integer.parseInt(date);
         Date date1 = new Date();
         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
         String dd = sdf.format(date1);
         // int ddi =  Integer.parseInt(dd);
         
         

         
         String status = statusField.getText();
         String savedStatus = "Not checked-in";
         int tti = Integer.parseInt(tt);
         int sloti = Integer.parseInt(slot);
         
            if (sloti == tti+1 && date.equals(dd) && status.equals(savedStatus)) {

            checkInButton.setEnabled(true);
            }
            
            else {
            checkInButton.setEnabled(false);
            }
             
            if (sloti == tti+1 && date.equals(dd) && status.equals(savedStatus)) {
            cancelButton.setEnabled(false);
            }
            
            
           
    }//GEN-LAST:event_reservationsTableMouseClicked

    private void checkInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkInButtonActionPerformed
        // TODO add your handling code here:
        new StudentReservationsQRScanner().setVisible(true);
        
        
    }//GEN-LAST:event_checkInButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        checkInButton.setEnabled(false);
        nameField.setText("");
        timingField.setText("");
        dateField.setText("");
        statusField.setText("");
        floorField.setText("");
            
        cancelButton.setEnabled(true);  
        Date dt = new Date();
         st = new SimpleDateFormat("HH");
         String tt = st.format(dt); 
         
        
         String slot = slotField.getText();
         
         String date = dateField.getText();
        // int datei = Integer.parseInt(date);
         Date date1 = new Date();
         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
         String dd = sdf.format(date1);
         // int ddi =  Integer.parseInt(dd);
         
         

         
         String status = statusField.getText();
         String savedStatus = "Not checked-in";
         //int tti = Integer.parseInt(tt);
         //int sloti = Integer.parseInt(slot);
       
     /*   if (sloti == tti+1 && date.equals(dd) && status.equals(savedStatus)) {
                 cancelButton.setEnabled(false);
             }
             else {
             cancelButton.setEnabled(true);
             } */
       
       
        nameLabel.setText("UPCOMING RESERVATIONS"); 
       
         st = new SimpleDateFormat("HH");
        
         
        
        String userID = StudentLoginPage.usernameField.getText();
     
        
         
              
        try{
            con =  ConnectionClass.getConnection();
            Statement doctorAppointmentStatement = (Statement) con.createStatement();

            String patientSql = ("Select seat_name, time, date, slot, status, floor from slot_info where username = '"+userID+"' and date >= '"+dd+"' and slot > '"+tt+"' and status = '"+savedStatus+"'");

            PreparedStatement patientPreparedStatement = con.prepareStatement(patientSql);
            ResultSet patientResultSet = patientPreparedStatement.executeQuery();
            DefaultTableModel washingtonModel = (DefaultTableModel)reservationsTable.getModel();
            washingtonModel.setRowCount(0);
            while(patientResultSet.next())
            {

            Object washington[] = { patientResultSet.getString("seat_name"),patientResultSet.getString("time"),patientResultSet.getString("date"),patientResultSet.getString("floor"),patientResultSet.getString("status"),patientResultSet.getString("slot")};
            washingtonModel.addRow(washington);
            }
            

    
    } catch(Exception e){
        JOptionPane.showMessageDialog(null, e);
    
    }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        checkInButton.setEnabled(false);
        nameField.setText("");
        timingField.setText("");
        dateField.setText("");
        statusField.setText("");
        floorField.setText("");
        
        
        nameLabel.setText("ALL RESERVATIONS");
        cancelButton.setEnabled(false);
        
        Date dt = new Date();
         st = new SimpleDateFormat("HH");
          
         
         
         Date date1 = new Date();
         SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
         String dd = sdf.format(date1);
         
        
        String userID = StudentLoginPage.usernameField.getText();

        String status = "Not checked-in";

              
        try{
            con =  ConnectionClass.getConnection();
            Statement doctorAppointmentStatement = (Statement) con.createStatement();

            String patientSql = ("Select seat_name, time, date, slot, floor, status from slot_info where username = '"+userID+"'");

            PreparedStatement patientPreparedStatement = con.prepareStatement(patientSql);
            ResultSet patientResultSet = patientPreparedStatement.executeQuery();
            DefaultTableModel washingtonModel = (DefaultTableModel)reservationsTable.getModel();
            washingtonModel.setRowCount(0);
            while(patientResultSet.next())
            {

            Object washington[] = { patientResultSet.getString("seat_name"),patientResultSet.getString("time"),patientResultSet.getString("date"),patientResultSet.getString("floor"),patientResultSet.getString("status"),patientResultSet.getString("slot")};

            washingtonModel.addRow(washington);
            }
    
    } catch(Exception e){
        JOptionPane.showMessageDialog(null, e);
    
    }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        new StudentProfilePage().setVisible(true);
            dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void navigateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_navigateMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_navigateMouseClicked

    private void navigateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_navigateActionPerformed
        // TODO add your handling code here:
        if(navigate.getSelectedItem().toString().equals("Back To Home Page")){
            String role = "";
            try{
                String slotSql = ("Select role from student_info where username = '"+StudentLoginPage.usernameField.getText()+"' ");
                PreparedStatement slotPreparedStatement = con.prepareStatement(slotSql);
                ResultSet c = slotPreparedStatement.executeQuery();
                while(c.next())
                {
                    role = c.getString("role");
                }
            } catch(Exception e){
                JOptionPane.showMessageDialog(null, e);
            }

            if (role.equals("student")){
                new StudentHomePage().setVisible(true);
                dispose();
            }

            if (role.equals("faculty")){
                new FacultyHomePage().setVisible(true);
                dispose();
            }

        }
        if(navigate.getSelectedItem().toString().equals("My Profile")){
            new StudentProfilePage().setVisible(true);
            dispose();
        }
        if(navigate.getSelectedItem().toString().equals("Order Page")){
            new StudentOrdersPage().setVisible(true);
            dispose();
        }
        if(navigate.getSelectedItem().toString().equals("Logout")){
            new NEUHomePage().setVisible(true);
            dispose();
        }
    }//GEN-LAST:event_navigateActionPerformed


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentReservationsPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentReservationsPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentReservationsPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentReservationsPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StudentReservationsPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton checkInButton;
    public static javax.swing.JTextField dateField;
    public static javax.swing.JTextField floorField;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JComboBox<String> navigate;
    private javax.swing.JTable reservationsTable;
    private javax.swing.JTextField slotField;
    public static javax.swing.JTextField statusField;
    public static javax.swing.JTextField timingField;
    // End of variables declaration//GEN-END:variables
}
